'fileTypes': [
  'bpl', 'gbpl', 'wbpl'
]
'foldingStartMarker': '/\\*\\*|\\{\\s*$'
'foldingStopMarker': '\\*\\*/|^\\s*\\}'
'name': 'Boogie'
'patterns': [
  {
    'begin': '"'
    'end': '"'
    'name': 'string.quoted.double.untitled'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.untitled'
      }
    ]
  }
  {
    'begin': '/\\*'
    'end': '\\*/'
    'name': 'comment.block.boogie'
  }
  {
    'match': '(//).*$\\n?'
    'name': 'comment.line.double-slash.boogie'
  }
  {
    'include': '#functions'
  }
  {
    'include': '#procedures'
  }
  {
    'include': '#constants-and-special-vars'
  }
  {
    'include': '#keywords'
  }
  {
    'include': '#labels'
  }
]
'repository':
  'constants-and-special-vars':
    'patterns': [
      {
        'match': '\\b(true|false)\\b'
        'name': 'constant.language.bpl'
      }
      {
        'match': '\\b(([0-9]+))\\b'
        'name': 'constant.numeric.bpl'
      }
    ]
  'functions':
    'patterns': [
      {
        'begin': '(function)\\s+(\\w+)((<)\\w+(>))?\\s*\\('
        'beginCaptures':
          '1':
            'name': 'keyword.control.boogie'
          '2':
            'name': 'entity.name.function.boogie'
          '4':
            'name': 'keyword.operator.tag.boogie'
          '5':
            'name': 'keyword.operator.tag.boogie'
        'end': ';|{'
        'name': 'meta.function.identifier.boogie'
        'patterns': [
          {
            'include': '#constants-and-special-vars'
          }
          {
            'include': '#keywords'
          }
          {
            'include': '#labels'
          }
        ]
      }
    ]
  'keywords':
    'patterns': [
      {
        'match': '\\b(axiom|complete|const|finite|free|function|implementation|invariant|old|procedure|returns|type|unique|where|if|then|else|while|goto|return)\\b'
        'name': 'keyword.control.boogie'
      }
      {
        'match': '(?<=[\\r\\n \\t\\(\\[\\],:])(bool|int)(?=[\\r\\n \\t\\)\\],;])'
        'name': 'constant.language.boogie'
      }
      {
        'match': '\\b(var|assert|assume|break|call|havoc|requires|ensures|modifies|forall|exists)\\b'
        'name': 'entity.name.procedure.boogie'
      }
      {
        'match': '(::)'
        'name': 'keyword.separator.boogie'
      }
      {
        'match': '(<==>|==>|&&|\\|\\|)'
        'name': 'keyword.operator.logical.binop.boogie'
      }
      {
        'match': '(==|!=|<=|>=|<:|<|>)'
        'name': 'keyword.operator.comparison.boogie'
      }
      {
        'match': '(:=)'
        'name': 'keyword.operator.assignment.boogie'
      }
      {
        'match': '(\\-|\\+|\\*|\\/|%)'
        'name': 'keyword.operator.arithmetic.boogie'
      }
      {
        'match': '(!|:)'
        'name': 'keyword.operator.logical.unop.boogie'
      }
      {
        'match': ';'
        'name': 'punctuation.terminator.boogie'
      }
    ]
  'procedures':
    'patterns': [
      {
        'begin': '(procedure)\\s+(\\w+)\\s*\\('
        'beginCaptures':
          '1':
            'name': 'keyword.control.boogie'
          '2':
            'name': 'entity.name.procedure.boogie'
        'end': '\\)(\\s+(returns)\\s*\\(.*\\))?'
        'name': 'meta.procedure.identifier.boogie'
      }
    ]
  'labels':
    'patterns': [
      {
        'match': '(\\s*([^: ]+):(\n|\r))'
        'name': 'keyword.declaration.boogie'
      }
    ]
'scopeName': 'source.bpl'
