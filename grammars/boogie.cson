'scopeName': 'source.bpl'
'name': 'Boogie'
'fileTypes': [
  'bpl'
  'gbpl'
  'wbpl'
]
'foldingStartMarker': '/\\*\\*|\\{\\s*$'
'foldingStopMarker': '\\*\\*/|^\\s*\\}'
'patterns': [
  {
    'name': 'string.quoted.double.untitled'
    'begin': '"'
    'end': '"'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.untitled'
      }
    ]
  }
  {
    'name': 'comment.block.boogie'
    'begin': '/\\*'
    'end': '\\*/'
  }
  {
    'name': 'comment.line.double-slash.boogie'
    'match': '(//).*$\\n?'
  }
  {
    'name': 'string.other.attribute.boogie'
    'begin': '{:'
    'end': '}'
    'patterns': [
      {
        'include': '#constants-and-special-vars'
      }
    ]
  }
  {
    'name': 'storage.type.modifier.tag.boogie'
    'match': '<[\\w\\s,]+>'
  }

  # XXX figure out a way to capture the function name? XXX
  # {
  #   'name': 'meta.function.identifier.boogie'
  #   'begin': '(function) ??? ([\\w$.]+) ??? \\('
  #   'beginCaptures':
  #     '1':
  #       'name': 'storage.type.declaration.boogie'
  #     '2':
  #       'name': 'entity.name.function.boogie'
  #   'end': ';|{'
  # }

  # XXX figure out a way to capture the procedure name? XXX
  # {
  #   'name': 'meta.procedure.identifier.boogie'
  #   'begin': '(procedure) ??? ([\\w$.]+) ??? \\('
  #   'beginCaptures':
  #     '1':
  #       'name': 'storage.type.declaration.boogie'
  #     '2':
  #       'name': 'entity.name.procedure.boogie'
  #   'end': '\\)(\\s+(returns)\\s*\\(.*\\))?'
  # }

  # XXX capture other declaration names: constants, variables, etc.

  {
    'include': '#constants-and-special-vars'
  }
  {
    'include': '#keywords'
  }
  {
    'match': '(\\s*([^: ]+):(\n|\r))'
    'name': 'entity.name.block.boogie'
  }
  {
    'match': ';'
    'name': 'punctuation.terminator.boogie'
  }
]
'repository':
  'constants-and-special-vars':
    'patterns': [
      {
        'name': 'constant.language.boolean.bpl'
        'match': '(?<![\\w$.])(true|false)(?![\\w$.])'
      }
      {
        'name': 'constant.numberic.bitvector.bpl'
        'match': '(?<![\\w$.])[0-9]+bv[0-9]+(?![\\w$.])'
      }
      {
        'name': 'constant.numeric.integer.bpl'
        'match': '(?<![\\w$.])[0-9]+(?![\\w$.])'
      }
      # {
      #   # XXX what is this for? XXX
      #   'name': 'constant.language.boogie'
      #   'match': '(?<=[\\r\\n \\t\\(\\[\\],:])(bool|int)(?=[\\r\\n \\t\\)\\],;])'
      # }
    ]
  'keywords':
    'patterns': [
      {
        'name': 'storage.type.declaration.boogie'
        'match': '\\b(axiom|const|function|implementation|procedure|type|var)\\b'
      }
      {
        'name': 'storage.type.boogie'
        'match': '(?<![\\w$.])(int|bool|real|bv[0-9]+)(?![\\w$.])'
      }
      {
        'name': 'storage.modifier.boogie'
        'match': '(?<![\\w$.])(complete|finite|free|unique|where)(?![\\w$.])'
      }
      {
        'name': 'keyword.other.specification.boogie'
        'match': '\\b(requires|ensures|modifies|returns|invariant)\\b'
      }
      {
        'name': 'keyword.control.boogie'
        'match': '\\b(break|call|while|goto|return)\\b'
      }
      {
        'name': 'keyword.control.conditional.boogie'
        'match': '\\b(if|then|else)\\b'
      }
      {
        'name': 'keyword.control.statement.boogie'
        'match': '\\b(assert|assume|havoc)\\b'
      }
      {
        'name': 'keyword.operator.assignment.boogie'
        'match': '(:=)'
      }
      {
        'name': 'keyword.other.old.boogie'
        'match': '\\bold\\b'
      }
      {
        'name': 'keyword.other.logical.quantifier.boogie'
        'match': '\\b(forall|exists)\\b'
      }
      {
        'name': 'keyword.operator.logical.boogie'
        'match': '::'
      }
      {
        'name': 'keyword.operator.logical.unary.boogie'
        'match': '!|:'
      }
      {
        'name': 'keyword.operator.logical.binary.boogie'
        'match': '<==>|==>|&&|\\|\\|'
      }
      {
        'name': 'keyword.operator.comparison.boogie'
        'match': '==|!=|<=|>=|<:|<|>'
      }
      {
        'name': 'keyword.operator.arithmetic.boogie'
        'match': '\\-|\\+|\\*|\\/|%'
      }
    ]
